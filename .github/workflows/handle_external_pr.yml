name: Fork Pull Request Workflow

on:
  pull_request:
    types: [opened]

jobs:
  handle_external_pr:
    # Only run this entire workflow if the PR was opened from a forked repo
    # The reasoning is that both bots and external contributors have to make
    # a fork of the repo before they can open a PR because they don't have
    # write access to the repo.
    if: github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest

    steps:
      - name: Add PR to project
        run: |
          gh pr edit ${{ github.event.pull_request.url }} --add-project Neurobagel

      - name: Label pull request with "_community"
        run: gh pr edit ${{ github.event.pull_request.number }} --add-label "_community"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  

      - name: Find project node id
        id: project_node
        run: | 
          # Get the node ID of the PR
          node_id=$(gh pr view ${{ github.event.pull_request.url }}  --json 'id' | jq -r '.id')
          parent_id=$(
              newCursor=""
              while true; do
          
              response=$(gh api graphql -f query='{
                  organization(login: "neurobagel") {
                      projectV2(number: 1) {
                      items(first: 100, orderBy: {field: POSITION, direction: DESC}, after: "'"${newCursor}"'") {
                          edges {
                          cursor
                          node {
                              content {
                              ... on PullRequest {
                                  childID: id
                              }
                              }
                              parentID: id
                          }
                          }
                      }
                      }
                  }
                  }')
          
                  # Because we may not be able to find the parent ID in the first 100 items
                  # we have to keep advancing the cursor to move through the list
                  # Note: we use 100 items to balance speed and API limits, might have to be changed
                  while read -r pID cID cursor; do
          
                  if [ "$cID" == "${node_id}" ];
                      then
                          echo $pID;
                          exit 0;
                      fi
                      newCursor="$cursor"
                  # Note: we need to use the here string
                  # to avoid running the while loop in a subshell that would not let us access newCursor
                  # after the while loop has finished
                  # see: https://tldp.org/LDP/abs/html/subshells.html
                  done <<< $(echo "$response" | jq -r '.data.organization.projectV2.items.edges[] | "\(.node.parentID) \(.node.content.childID) \(.cursor)"')
                  
                  if [ ! -n "$newCursor" ]; then
                      # We have passed through the entire list of items 
                      # and didn't find the project card for our PR.
                      # Something is wrong and we will now crash the workflow.
                      exit 1;
                  fi
              done
          )
          echo "parent_id=${parent_id}" >> $GITHUB_OUTPUT

      - name: Get IDs for Status field and Community option
        id: get_id
        env:
          FIELD: "Status"
          OPTION: "Community"
        run: |
          response=$(gh api graphql -f query='{
            organization(login: "neurobagel") {
              projectV2(number: 1) {
                field(name: "'"${FIELD}"'") {
                  ... on ProjectV2SingleSelectField {
                    fieldID: id
                    options(names: "'"${OPTION}"'") {
                      optionID: id
                    }
                  }
                }
              }
            }
          }' | jq '.data.organization.projectV2.field | "\(.fieldID) \(.options[0].optionID)"')
          read fieldID optionID <<< "${response//\"}"
          
          echo "fieldID=${fieldID}" >> $GITHUB_OUTPUT
          echo "optionID=${optionID}" >> $GITHUB_OUTPUT

      - name: Set "Status" of PR to "Community"
        run: |
          gh api graphql -f query='mutation {
            updateProjectV2ItemFieldValue(     
              input: {projectId: "PVT_kwDOBaeejM4AAQiP", itemId: "${{ steps.project_node.outputs.parent_id }}", fieldId: "${{ steps.get_id.outputs.fieldID }}", value: {singleSelectOptionId: "${{ steps.get_id.outputs.optionID }}"}}
            ) {                                                                
              clientMutationId
            }
          }'